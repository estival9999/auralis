"""
Sistema de Reuni√µes AURALIS - Vers√£o Linux Corrigida
Resolu√ß√£o fixa: 320x240 pixels
Interface otimizada para Linux com entrada de texto funcionando
Interface gr√°fica principal do sistema com integra√ß√£o completa ao backend de IA
"""

import sys
import os
from pathlib import Path

# IMPORTANTE: Carregar .env ANTES de importar outros m√≥dulos
def load_env():
    """
    Carrega vari√°veis de ambiente do arquivo .env
    
    Esta fun√ß√£o √© essencial para configurar as credenciais da API OpenAI
    e outras configura√ß√µes do sistema antes da inicializa√ß√£o
    """
    env_file = Path(__file__).parent / '.env'
    
    if env_file.exists():
        print("üìã Carregando configura√ß√µes de .env...")
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key] = value.strip()
                        # Mostrar apenas parte da chave por seguran√ßa
                        if key == 'OPENAI_API_KEY':
                            print(f"   ‚úÖ {key} configurada ({value[:20]}...)")
                        elif key in ['SUPABASE_URL', 'DEBUG_MODE']:
                            print(f"   ‚úÖ {key} configurada")
    else:
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")

# Carregar vari√°veis de ambiente antes de qualquer outra importa√ß√£o
load_env()

# Agora importar as outras bibliotecas com ambiente configurado
import customtkinter as ctk
from tkinter import messagebox, Canvas
from datetime import datetime, timedelta
import threading
import time
import math
import random
import numpy as np

# Importar o backend integrado (agora com as vari√°veis de ambiente carregadas)
# Este import deve acontecer ap√≥s load_env() para garantir configura√ß√£o correta
from main import AURALISBackend, process_message_async

# Importar processador de √°udio
try:
    from src.audio_processor import AudioRecorder
    AUDIO_DISPONIVEL = True
except ImportError:
    print("‚ö†Ô∏è  M√≥dulo de √°udio n√£o dispon√≠vel. Instale pyaudio: pip install pyaudio")
    AUDIO_DISPONIVEL = False

class SistemaTFT:
    """
    Classe principal da interface gr√°fica do sistema AURALIS.
    
    Gerencia todas as telas, navega√ß√£o, anima√ß√µes e integra√ß√£o com o backend.
    Otimizada para display de 320x240 pixels com tema escuro.
    """
    
    def __init__(self):
        # Configurar tema escuro para toda a aplica√ß√£o
        ctk.set_appearance_mode("dark")
        
        # Inicializar backend AURALIS com sistema de agentes IA
        print("üöÄ Inicializando backend AURALIS...")
        # Backend conectado APENAS ao Supabase
        self.backend = AURALISBackend()  # Sem mocks - apenas Supabase
        
        # Inicializar gravador de √°udio se dispon√≠vel
        self.audio_recorder = AudioRecorder() if AUDIO_DISPONIVEL else None
        
        # Paleta de cores personalizada otimizada para tema escuro
        # Cores cuidadosamente selecionadas para boa visibilidade e acessibilidade
        self.cores = {
            "primaria": "#1E88E5",
            "secundaria": "#424242",
            "sucesso": "#43A047",
            "perigo": "#E53935",
            "alerta": "#FB8C00",
            "fundo": "#121212",
            "superficie": "#1E1E1E",
            "texto": "#E0E0E0",
            "texto_secundario": "#9E9E9E",
            "borda": "#2C2C2C",
            "audio_ativo": "#00E676",
            "audio_processando": "#2196F3",
            "audio_inativo": "#616161",
            "glow": "#00BCD4",
            "accent": "#FF4081"
        }
        
        # Janela principal - COM decora√ß√µes no Linux para funcionar corretamente
        # Importante: manter decora√ß√µes para garantir funcionalidade de entrada de texto
        self.janela = ctk.CTk()
        self.janela.title("AURALIS - Sistema de Reuni√µes")
        self.janela.geometry("320x240")
        self.janela.resizable(False, False)  # Tamanho fixo para consist√™ncia
        self.janela.configure(fg_color=self.cores["fundo"])
        
        # Estado do sistema - vari√°veis de controle principais
        self.usuario_logado = None      # Dados do usu√°rio autenticado
        self.frame_atual = None         # Frame/tela atualmente vis√≠vel
        self.gravando = False           # Status de grava√ß√£o em andamento
        self.timer_ativo = False        # Controle do timer de grava√ß√£o
        self.contexto_reuniao = None    # Contexto da reuni√£o para a IA
        
        # Estado da interface de √°udio - controla anima√ß√µes e intera√ß√µes
        self.audio_ativo = False        # Interface de √°udio est√° ativa
        self.audio_estado = "idle"      # Estado: idle, recording, processing
        self.animacao_ativa = False     # Controle de anima√ß√µes de part√≠culas
        
        # Centralizar janela na tela do usu√°rio
        self.centralizar_janela()
        
        # Container principal - todas as telas s√£o filhas deste container
        self.container_principal = ctk.CTkFrame(self.janela, fg_color=self.cores["fundo"])
        self.container_principal.pack(fill="both", expand=True)
        
        # Iniciar com tela de login - ponto de entrada do sistema
        self.mostrar_login()
    
    def centralizar_janela(self):
        """
        Centraliza a janela na tela do usu√°rio.
        Calcula a posi√ß√£o baseada nas dimens√µes da tela.
        """
        self.janela.update_idletasks()
        largura = 320
        altura = 240
        x = (self.janela.winfo_screenwidth() // 2) - (largura // 2)
        y = (self.janela.winfo_screenheight() // 2) - (altura // 2)
        self.janela.geometry(f"{largura}x{altura}+{x}+{y}")
    
    def executar(self):
        """Inicia o loop principal da interface gr√°fica"""
        self.janela.mainloop()
    
    def transicao_rapida(self, novo_frame_func):
        """
        Realiza transi√ß√£o r√°pida entre telas.
        
        Args:
            novo_frame_func: Fun√ß√£o que cria a nova tela
        """
        if self.frame_atual:
            self.frame_atual.destroy()
        novo_frame_func()
    
    # ==================== TELA DE LOGIN ====================
    def mostrar_login(self):
        """Cria e exibe a tela de login do sistema"""
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        # Container central para o formul√°rio de login
        frame_central = ctk.CTkFrame(self.frame_atual, width=280, height=170, fg_color=self.cores["superficie"])
        frame_central.place(relx=0.5, rely=0.5, anchor="center")
        frame_central.pack_propagate(False)  # Manter tamanho fixo
        
        # Espa√ßamento superior para melhor alinhamento visual
        ctk.CTkFrame(frame_central, height=10, fg_color=self.cores["superficie"]).pack()
        
        # Campos de login
        # Campo de usu√°rio
        ctk.CTkLabel(
            frame_central, 
            text="Usu√°rio", 
            font=ctk.CTkFont(size=12),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(0, 2))
        
        self.entry_usuario = ctk.CTkEntry(
            frame_central, 
            width=220, 
            height=30,
            fg_color=self.cores["fundo"],
            border_color=self.cores["primaria"],
            placeholder_text="Digite seu nome"
        )
        self.entry_usuario.pack(pady=(0, 8))
        
        # Campo de senha
        ctk.CTkLabel(
            frame_central, 
            text="Senha", 
            font=ctk.CTkFont(size=12),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(0, 2))
        
        self.entry_senha = ctk.CTkEntry(
            frame_central, 
            width=220, 
            height=30,
            fg_color=self.cores["fundo"],
            border_color=self.cores["primaria"],
            placeholder_text="Digite sua senha",
            show="‚óè"
        )
        self.entry_senha.pack(pady=(0, 12))
        
        # Bot√£o entrar
        self.btn_login = ctk.CTkButton(
            frame_central,
            text="ENTRAR",
            width=220,
            height=40,
            command=self.fazer_login,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cores["primaria"],
            hover_color="#1976D2"
        )
        self.btn_login.pack()
        
        # Permitir login com Enter na senha
        self.entry_senha.bind("<Return>", lambda e: self.fazer_login())
        
        # Focar no campo usu√°rio ap√≥s a janela estar completamente carregada
        self.janela.after(100, lambda: self.entry_usuario.focus_set())
    
    def fazer_login(self):
        usuario = self.entry_usuario.get().strip()
        senha = self.entry_senha.get()
        
        if not usuario:
            return
        
        # Autenticar via backend
        user = self.backend.authenticate(usuario, senha)
        if user:
            self.usuario_logado = user
            self.transicao_rapida(self.mostrar_menu_principal)
        else:
            messagebox.showerror("Erro", "Usu√°rio ou senha inv√°lidos", parent=self.janela)
            self.entry_senha.delete(0, "end")
    
    # ==================== MENU PRINCIPAL ====================
    def mostrar_menu_principal(self):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        # Cabe√ßalho
        frame_header = ctk.CTkFrame(self.frame_atual, height=35, fg_color=self.cores["superficie"])
        frame_header.pack(fill="x")
        frame_header.pack_propagate(False)
        
        ctk.CTkLabel(
            frame_header,
            text="Menu Principal",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cores["texto"]
        ).pack(side="left", padx=15, pady=8)
        
        # Logout
        ctk.CTkButton(
            frame_header,
            text="‚óÑ",
            width=28,
            height=25,
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            text_color=self.cores["texto_secundario"],
            hover_color=self.cores["secundaria"],
            command=self.fazer_logout
        ).pack(side="right", padx=8, pady=5)
        
        # Usu√°rio
        ctk.CTkLabel(
            frame_header,
            text=self.usuario_logado.get('username', self.usuario_logado.get('usuario', 'Usu√°rio')),
            font=ctk.CTkFont(size=10),
            text_color=self.cores["texto_secundario"]
        ).pack(side="right", padx=5)
        
        # Container para bot√µes
        frame_botoes = ctk.CTkFrame(self.frame_atual, fg_color=self.cores["fundo"])
        frame_botoes.pack(fill="both", expand=True)
        
        # Bot√µes
        botoes = [
            ("HIST√ìRICO\nREUNI√ïES", self.mostrar_historico, self.cores["secundaria"]),
            ("NOVA\nGRAVA√á√ÉO", self.mostrar_pre_gravacao, self.cores["sucesso"]),
            ("ASSISTENTE\nINTELIGENTE", self.mostrar_assistente, self.cores["primaria"])
        ]
        
        for i, (texto, comando, cor) in enumerate(botoes):
            btn = ctk.CTkButton(
                frame_botoes,
                text=texto,
                width=320,
                height=68,
                command=comando,
                font=ctk.CTkFont(size=15, weight="bold"),
                fg_color=cor,
                hover_color=cor,
                corner_radius=0,
                text_color=self.cores["texto"]
            )
            btn.pack(fill="both", expand=True)
            
            if i < len(botoes) - 1:
                linha = ctk.CTkFrame(frame_botoes, height=1, fg_color=self.cores["fundo"])
                linha.pack(fill="x")
    
    # ==================== HIST√ìRICO ====================
    def mostrar_historico(self):
        self.transicao_rapida(self._criar_historico)
    
    def _criar_historico(self):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        self.criar_cabecalho_voltar("üìã Hist√≥rico de Reuni√µes")
        
        # Lista
        frame_lista = ctk.CTkScrollableFrame(
            self.frame_atual, 
            height=145,
            fg_color=self.cores["fundo"]
        )
        frame_lista.pack(fill="both", expand=True, padx=0, pady=0)
        
        reunioes = [
            ("Planejamento Q1", "15/01 14:00", "45 min"),
            ("Daily Standup", "14/01 10:00", "15 min"),
            ("Revis√£o Sprint", "12/01 15:30", "1h 20min"),
            ("Kickoff Projeto", "10/01 09:00", "2h"),
        ]
        
        for i, (titulo, data, duracao) in enumerate(reunioes):
            frame_item = ctk.CTkFrame(
                frame_lista, 
                height=55,
                fg_color=self.cores["superficie"]
            )
            frame_item.pack(fill="x", padx=10, pady=(5 if i == 0 else 0, 0))
            frame_item.pack_propagate(False)
            
            frame_info = ctk.CTkFrame(frame_item, fg_color="transparent")
            frame_info.pack(side="left", fill="both", expand=True, padx=(12, 0))
            
            ctk.CTkLabel(
                frame_info,
                text=titulo,
                font=ctk.CTkFont(size=11, weight="bold"),
                text_color=self.cores["texto"],
                anchor="w"
            ).place(x=0, y=8)
            
            ctk.CTkLabel(
                frame_info,
                text=f"{data} ‚Ä¢ {duracao}",
                font=ctk.CTkFont(size=9),
                text_color=self.cores["texto_secundario"],
                anchor="w"
            ).place(x=0, y=28)
            
            btn_ver = ctk.CTkButton(
                frame_item,
                text="Ver",
                width=50,
                height=30,
                font=ctk.CTkFont(size=11),
                fg_color=self.cores["primaria"],
                command=lambda t=titulo, d=data, dur=duracao: self.mostrar_detalhes_reuniao(t, d, dur)
            )
            btn_ver.place(relx=0.85, rely=0.5, anchor="center")
            
            if i < len(reunioes) - 1:
                separator = ctk.CTkFrame(
                    frame_lista, 
                    height=1, 
                    fg_color=self.cores["secundaria"]
                )
                separator.pack(fill="x", padx=20, pady=0)
    
    def mostrar_detalhes_reuniao(self, titulo, data, duracao):
        self.transicao_rapida(lambda: self._criar_detalhes_reuniao(titulo, data, duracao))
    
    def _criar_detalhes_reuniao(self, titulo, data, duracao):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        # Cabe√ßalho
        frame_header = ctk.CTkFrame(self.frame_atual, height=35, fg_color=self.cores["superficie"])
        frame_header.pack(fill="x")
        frame_header.pack_propagate(False)
        
        ctk.CTkButton(
            frame_header,
            text="‚óÑ",
            width=30,
            height=25,
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            text_color=self.cores["texto"],
            hover_color=self.cores["secundaria"],
            command=lambda: self.transicao_rapida(self._criar_historico)
        ).pack(side="left", padx=5, pady=5)
        
        ctk.CTkLabel(
            frame_header,
            text="üìÑ Detalhes",
            font=ctk.CTkFont(size=13, weight="bold"),
            text_color=self.cores["texto"]
        ).pack(side="left", padx=10, pady=8)
        
        # Bot√£o analisar
        ctk.CTkButton(
            self.frame_atual,
            text="ü§ñ Analisar com IA",
            width=300,
            height=34,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cores["primaria"],
            hover_color="#1976D2",
            command=lambda: self.analisar_com_ia(titulo)
        ).pack(padx=10, pady=(5, 5))
        
        # Info
        frame_info = ctk.CTkFrame(self.frame_atual, height=30, fg_color=self.cores["superficie"])
        frame_info.pack(fill="x", padx=10, pady=(0, 5))
        frame_info.pack_propagate(False)
        
        titulo_curto = titulo[:15] + "..." if len(titulo) > 15 else titulo
        info_text = f"{titulo_curto} ‚Ä¢ {data} ‚Ä¢ {duracao}"
        ctk.CTkLabel(
            frame_info,
            text=info_text,
            font=ctk.CTkFont(size=9),
            text_color=self.cores["texto_secundario"]
        ).pack(expand=True)
        
        # Transcri√ß√£o
        ctk.CTkLabel(
            self.frame_atual,
            text="Transcri√ß√£o:",
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto"]
        ).pack(anchor="w", padx=10, pady=(0, 2))
        
        text_transcricao = ctk.CTkTextbox(
            self.frame_atual,
            height=98,
            font=ctk.CTkFont(size=10),
            fg_color=self.cores["superficie"],
            wrap="word"
        )
        text_transcricao.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        transcricao = f"""Reuni√£o: {titulo}
Data: {data} - Dura√ß√£o: {duracao}

PARTICIPANTES:
‚Ä¢ {self.usuario_logado.get('username', self.usuario_logado.get('usuario', 'Usu√°rio'))} (Organizador)
‚Ä¢ Jo√£o Silva (Desenvolvimento)
‚Ä¢ Maria Santos (Design)
‚Ä¢ Pedro Costa (Gest√£o)

PAUTA:
1. Revis√£o do Sprint anterior
2. Planejamento do pr√≥ximo ciclo
3. Discuss√£o de impedimentos
4. Defini√ß√£o de prioridades

PONTOS DISCUTIDOS:
‚Ä¢ Objetivos do trimestre foram revisados e aprovados
‚Ä¢ Aloca√ß√£o de recursos para o novo projeto
‚Ä¢ Prazos definidos conforme cronograma
‚Ä¢ M√©tricas de desempenho analisadas

DECIS√ïES TOMADAS:
‚Ä¢ Aprovar novo or√ßamento de R$ 50.000
‚Ä¢ Contratar 2 desenvolvedores at√© mar√ßo
‚Ä¢ Implementar nova metodologia √°gil

A√á√ïES PENDENTES:
‚Ä¢ Jo√£o: Preparar relat√≥rio t√©cnico at√© sexta-feira
‚Ä¢ Maria: Agendar reuni√£o com cliente
‚Ä¢ Pedro: Revisar documenta√ß√£o do projeto

PR√ìXIMOS PASSOS:
‚Ä¢ Reuni√£o de acompanhamento em 15 dias
‚Ä¢ Revis√£o mensal de m√©tricas"""
        
        text_transcricao.insert("1.0", transcricao)
        text_transcricao.configure(state="disabled")
    
    def analisar_com_ia(self, titulo):
        self.contexto_reuniao = titulo
        self.transicao_rapida(self._criar_assistente)
    
    # ==================== PR√â-GRAVA√á√ÉO ====================
    def mostrar_pre_gravacao(self):
        self.transicao_rapida(self._criar_pre_gravacao)
    
    def _criar_pre_gravacao(self):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        self.criar_cabecalho_voltar("üìù Nova Reuni√£o")
        
        # Tabs para escolher m√©todo
        self.tab_selecionada = ctk.StringVar(value="texto")
        
        frame_tabs = ctk.CTkFrame(self.frame_atual, height=36, fg_color=self.cores["fundo"])
        frame_tabs.pack(fill="x", padx=10, pady=(5, 5))
        
        ctk.CTkSegmentedButton(
            frame_tabs,
            values=["üìù Texto", "üé§ √Åudio"],
            variable=self.tab_selecionada,
            command=self.alternar_tab_entrada,
            fg_color=self.cores["superficie"],
            selected_color=self.cores["primaria"],
            unselected_color=self.cores["secundaria"],
            selected_hover_color=self.cores["primaria"],
            unselected_hover_color=self.cores["secundaria"]
        ).pack(expand=True, fill="x")
        
        # Container para conte√∫do das tabs
        self.frame_conteudo_tab = ctk.CTkFrame(self.frame_atual, fg_color=self.cores["fundo"])
        self.frame_conteudo_tab.pack(fill="both", expand=True, padx=10, pady=(0, 5))
        
        # Criar tab de texto inicial
        self._criar_tab_texto()
        
    def alternar_tab_entrada(self, valor):
        """Alterna entre entrada de texto e √°udio"""
        # Limpar conte√∫do atual
        for widget in self.frame_conteudo_tab.winfo_children():
            widget.destroy()
            
        if valor == "üìù Texto":
            self._criar_tab_texto()
        else:  # "üé§ √Åudio"
            self._criar_tab_audio()
    
    def _criar_tab_texto(self):
        """Cria interface para entrada de texto"""
        frame_form = ctk.CTkFrame(self.frame_conteudo_tab, fg_color=self.cores["superficie"])
        frame_form.pack(fill="both", expand=True)
        
        ctk.CTkLabel(
            frame_form, 
            text="T√≠tulo da Reuni√£o", 
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(8, 2))
        
        self.entry_titulo = ctk.CTkEntry(
            frame_form, 
            width=270,
            height=30,
            fg_color=self.cores["fundo"],
            border_color=self.cores["primaria"],
            placeholder_text="Ex: Reuni√£o de Planejamento"
        )
        self.entry_titulo.pack(pady=(0, 8))
        
        ctk.CTkLabel(
            frame_form, 
            text="Conte√∫do da Reuni√£o", 
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(0, 2))
        
        self.text_conteudo = ctk.CTkTextbox(
            frame_form, 
            width=270,
            height=80,
            font=ctk.CTkFont(size=10),
            fg_color=self.cores["fundo"]
        )
        self.text_conteudo.pack(pady=(0, 8))
        
        # Bot√µes
        frame_btns = ctk.CTkFrame(frame_form, fg_color="transparent")
        frame_btns.pack(pady=(5, 10))
        
        ctk.CTkButton(
            frame_btns,
            text="Cancelar",
            width=120,
            height=30,
            fg_color=self.cores["secundaria"],
            font=ctk.CTkFont(size=12),
            command=lambda: self.transicao_rapida(self.mostrar_menu_principal)
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            frame_btns,
            text="Salvar",
            width=120,
            height=30,
            fg_color=self.cores["sucesso"],
            font=ctk.CTkFont(size=12),
            command=self.salvar_reuniao_texto
        ).pack(side="left", padx=5)
        
        self.entry_titulo.focus_set()
    
    def _criar_tab_audio(self):
        """Cria interface para grava√ß√£o de √°udio"""
        frame_form = ctk.CTkFrame(self.frame_conteudo_tab, fg_color=self.cores["superficie"])
        frame_form.pack(fill="both", expand=True)
        
        ctk.CTkLabel(
            frame_form, 
            text="T√≠tulo da Reuni√£o", 
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(8, 2))
        
        self.entry_titulo_audio = ctk.CTkEntry(
            frame_form, 
            width=270,
            height=30,
            fg_color=self.cores["fundo"],
            border_color=self.cores["primaria"],
            placeholder_text="Ex: Reuni√£o de Planejamento"
        )
        self.entry_titulo_audio.pack(pady=(0, 8))
        
        ctk.CTkLabel(
            frame_form, 
            text="Observa√ß√µes (opcional)", 
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        ).pack(pady=(0, 2))
        
        self.text_obs_audio = ctk.CTkTextbox(
            frame_form, 
            width=270,
            height=40,
            font=ctk.CTkFont(size=10),
            fg_color=self.cores["fundo"]
        )
        self.text_obs_audio.pack(pady=(0, 10))
        
        # Bot√£o grande de grava√ß√£o
        self.btn_gravar_audio = ctk.CTkButton(
            frame_form,
            text="üé§ Iniciar Grava√ß√£o",
            width=200,
            height=50,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cores["perigo"],
            hover_color="#C62828",
            command=self.iniciar_gravacao_audio
        )
        self.btn_gravar_audio.pack(pady=20)
        
        # Status da grava√ß√£o
        self.label_status_audio = ctk.CTkLabel(
            frame_form,
            text="Clique para come√ßar a gravar",
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        )
        self.label_status_audio.pack()
        
        # Bot√µes
        frame_btns = ctk.CTkFrame(frame_form, fg_color="transparent")
        frame_btns.pack(pady=(15, 10))
        
        ctk.CTkButton(
            frame_btns,
            text="Cancelar",
            width=120,
            height=30,
            fg_color=self.cores["secundaria"],
            font=ctk.CTkFont(size=12),
            command=lambda: self.transicao_rapida(self.mostrar_menu_principal)
        ).pack(side="left", padx=5)
        
        self.entry_titulo_audio.focus_set()
    
    def salvar_reuniao_texto(self):
        """Salva reuni√£o inserida por texto"""
        titulo = self.entry_titulo.get().strip()
        conteudo = self.text_conteudo.get("1.0", "end-1c").strip()
        
        if not titulo:
            self.entry_titulo.configure(
                border_color=self.cores["perigo"], 
                border_width=2
            )
            self.entry_titulo.focus_set()
            return
            
        if not conteudo:
            messagebox.showwarning(
                "Conte√∫do vazio",
                "Por favor, insira o conte√∫do da reuni√£o.",
                parent=self.janela
            )
            return
        
        # Processar e salvar no banco
        self.processar_reuniao_texto(titulo, conteudo)
    
    def processar_reuniao_texto(self, titulo: str, conteudo: str):
        """Processa e salva reuni√£o de texto no banco"""
        try:
            # Mostrar loading
            loading = ctk.CTkToplevel(self.janela)
            loading.title("Processando...")
            loading.geometry("200x100")
            loading.resizable(False, False)
            
            ctk.CTkLabel(
                loading,
                text="Processando reuni√£o...\nAguarde...",
                font=ctk.CTkFont(size=12)
            ).pack(expand=True)
            
            loading.update()
            
            # Processar em thread separada
            def processar():
                try:
                    # Criar arquivo tempor√°rio
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    arquivo_temp = f"reuniao_texto_{timestamp}.txt"
                    
                    # Salvar conte√∫do com cabe√ßalho completo
                    with open(arquivo_temp, "w", encoding="utf-8") as f:
                        f.write(f"T√≠tulo: {titulo}\n")
                        f.write(f"Respons√°vel: {self.usuario_logado.get('username', 'N√£o identificado')}\n")
                        f.write(f"Data: {datetime.now().strftime('%d/%m/%Y')}\n")
                        f.write(f"Hora: {datetime.now().strftime('%H:%M')}\n")
                        if hasattr(self, 'observacoes_reuniao'):
                            f.write(f"Observa√ß√µes: {self.observacoes_reuniao}\n")
                        f.write(f"\n{conteudo}")
                    
                    # Processar embeddings
                    from src.embeddings_processor import ProcessadorEmbeddings
                    processador = ProcessadorEmbeddings()
                    
                    # O processador extrai metadados automaticamente do arquivo
                    sucesso = processador.processar_arquivo(arquivo_temp)
                    
                    # Remover arquivo tempor√°rio
                    import os
                    os.remove(arquivo_temp)
                    
                    # Callback na thread principal
                    self.janela.after(0, lambda: self.finalizar_processamento_texto(loading, sucesso))
                    
                except Exception as e:
                    erro_msg = str(e)
                    self.janela.after(0, lambda: self.erro_processamento_texto(loading, erro_msg))
            
            threading.Thread(target=processar, daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao processar reuni√£o: {str(e)}", parent=self.janela)
    
    def finalizar_processamento_texto(self, loading, sucesso):
        """Finaliza processamento de texto"""
        loading.destroy()
        
        if sucesso:
            messagebox.showinfo(
                "Sucesso",
                "Reuni√£o salva com sucesso!",
                parent=self.janela
            )
            self.transicao_rapida(self.mostrar_menu_principal)
        else:
            messagebox.showerror(
                "Erro",
                "Erro ao salvar reuni√£o no banco de dados.",
                parent=self.janela
            )
    
    def erro_processamento_texto(self, loading, erro):
        """Trata erro no processamento"""
        loading.destroy()
        messagebox.showerror("Erro", f"Erro ao processar: {erro}", parent=self.janela)
    
    def iniciar_gravacao_audio(self):
        """Inicia grava√ß√£o de √°udio da reuni√£o"""
        titulo = self.entry_titulo_audio.get().strip()
        
        if not titulo:
            self.entry_titulo_audio.configure(
                border_color=self.cores["perigo"], 
                border_width=2
            )
            self.entry_titulo_audio.focus_set()
            return
        
        if not self.audio_recorder:
            messagebox.showwarning(
                "√Åudio n√£o dispon√≠vel",
                "Instale pyaudio para usar esta funcionalidade:\npip install pyaudio",
                parent=self.janela
            )
            return
        
        # Salvar informa√ß√µes para uso posterior
        self.titulo_reuniao_audio = titulo
        self.observacoes_reuniao_audio = self.text_obs_audio.get("1.0", "end-1c").strip()
        self.data_inicio_gravacao = datetime.now()
        
        # Alternar estado do bot√£o
        if not hasattr(self, 'gravando_reuniao') or not self.gravando_reuniao:
            # Iniciar grava√ß√£o
            self.gravando_reuniao = True
            self.btn_gravar_audio.configure(
                text="‚èπÔ∏è Parar Grava√ß√£o",
                fg_color=self.cores["sucesso"]
            )
            self.label_status_audio.configure(
                text="üî¥ Gravando...",
                text_color=self.cores["perigo"]
            )
            
            try:
                self.audio_recorder.toggle_recording()
                # Mostrar tempo de grava√ß√£o
                self.tempo_inicio_gravacao = time.time()
                self.atualizar_tempo_gravacao()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao iniciar grava√ß√£o: {str(e)}", parent=self.janela)
                self.gravando_reuniao = False
                
        else:
            # Parar grava√ß√£o
            self.gravando_reuniao = False
            self.btn_gravar_audio.configure(
                text="‚è≥ Processando...",
                state="disabled"
            )
            self.label_status_audio.configure(
                text="Processando transcri√ß√£o...",
                text_color=self.cores["audio_processando"]
            )
            
            try:
                self.audio_recorder.toggle_recording()
                # Processar em thread separada
                threading.Thread(target=self.processar_gravacao_reuniao, daemon=True).start()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao parar grava√ß√£o: {str(e)}", parent=self.janela)
    
    def atualizar_tempo_gravacao(self):
        """Atualiza tempo de grava√ß√£o na tela"""
        if hasattr(self, 'gravando_reuniao') and self.gravando_reuniao:
            tempo_decorrido = int(time.time() - self.tempo_inicio_gravacao)
            minutos = tempo_decorrido // 60
            segundos = tempo_decorrido % 60
            self.label_status_audio.configure(
                text=f"üî¥ Gravando... {minutos:02d}:{segundos:02d}"
            )
            self.janela.after(1000, self.atualizar_tempo_gravacao)
    
    def processar_gravacao_reuniao(self):
        """Processa grava√ß√£o da reuni√£o"""
        try:
            # Obter transcri√ß√£o
            transcricao = self.audio_recorder.get_transcription()
            
            if transcricao:
                # Criar cabe√ßalho completo
                cabecalho = f"""T√≠tulo: {self.titulo_reuniao_audio}
Respons√°vel: {self.usuario_logado.get('username', 'N√£o identificado')}
Data: {self.data_inicio_gravacao.strftime('%d/%m/%Y')}
Hora: {self.data_inicio_gravacao.strftime('%H:%M')}"""
                
                if self.observacoes_reuniao_audio:
                    cabecalho += f"\nObserva√ß√µes: {self.observacoes_reuniao_audio}"
                
                # Combinar cabe√ßalho com transcri√ß√£o
                conteudo_completo = f"{cabecalho}\n\n{transcricao}"
                
                # Processar como texto
                self.janela.after(0, lambda: self.processar_reuniao_texto(
                    self.titulo_reuniao_audio, 
                    conteudo_completo
                ))
            else:
                self.janela.after(0, lambda: messagebox.showerror(
                    "Erro", 
                    "N√£o foi poss√≠vel transcrever o √°udio.", 
                    parent=self.janela
                ))
                
        except Exception as e:
            self.janela.after(0, lambda: messagebox.showerror(
                "Erro", 
                f"Erro ao processar √°udio: {str(e)}", 
                parent=self.janela
            ))
        finally:
            # Resetar interface
            self.janela.after(0, lambda: self.resetar_interface_audio())
    
    def resetar_interface_audio(self):
        """Reseta interface de √°udio ap√≥s processamento"""
        self.btn_gravar_audio.configure(
            text="üé§ Iniciar Grava√ß√£o",
            fg_color=self.cores["perigo"],
            state="normal"
        )
        self.label_status_audio.configure(
            text="Clique para come√ßar a gravar",
            text_color=self.cores["texto_secundario"]
        )
    
    def iniciar_gravacao(self):
        titulo = self.entry_titulo.get().strip()
        if not titulo:
            self.entry_titulo.configure(
                border_color=self.cores["perigo"], 
                border_width=2,
                placeholder_text="‚ö†Ô∏è Campo obrigat√≥rio"
            )
            self.entry_titulo.focus_set()
            self.janela.after(2000, lambda: self.entry_titulo.configure(
                border_color=self.cores["primaria"], 
                border_width=2,
                placeholder_text="Ex: Reuni√£o de Planejamento"
            ))
            return
        
        self.dados_reuniao = {
            'titulo': titulo,
            'observacoes': self.text_obs.get("1.0", "end-1c")
        }
        
        self.transicao_rapida(self._criar_gravacao)
    
    # ==================== GRAVA√á√ÉO ====================
    def _criar_gravacao(self):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        frame_central = ctk.CTkFrame(self.frame_atual, fg_color=self.cores["superficie"])
        frame_central.pack(fill="both", expand=True, padx=10, pady=(5, 8))
        
        titulo_curto = self.dados_reuniao['titulo'][:25]
        if len(self.dados_reuniao['titulo']) > 25:
            titulo_curto += "..."
            
        ctk.CTkLabel(
            frame_central,
            text=titulo_curto,
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cores["texto"]
        ).pack(pady=(15, 10))
        
        self.label_rec = ctk.CTkLabel(
            frame_central,
            text="‚óè REC",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cores["perigo"]
        )
        self.label_rec.pack()
        
        self.label_timer = ctk.CTkLabel(
            frame_central,
            text="00:00",
            font=ctk.CTkFont(size=34, weight="bold"),
            text_color=self.cores["texto"]
        )
        self.label_timer.pack(pady=8)
        
        frame_controles = ctk.CTkFrame(frame_central, fg_color="transparent")
        frame_controles.pack(pady=12)
        
        self.btn_pausar = ctk.CTkButton(
            frame_controles,
            text="‚è∏",
            width=70,
            height=45,
            font=ctk.CTkFont(size=20),
            fg_color=self.cores["alerta"],
            command=self.pausar_gravacao
        )
        self.btn_pausar.pack(side="left", padx=5)
        
        ctk.CTkButton(
            frame_controles,
            text="‚èπ",
            width=70,
            height=45,
            font=ctk.CTkFont(size=20),
            fg_color=self.cores["sucesso"],
            command=self.parar_gravacao
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            frame_controles,
            text="‚úï",
            width=70,
            height=45,
            font=ctk.CTkFont(size=20),
            fg_color=self.cores["perigo"],
            command=self.cancelar_gravacao
        ).pack(side="left", padx=5)
        
        self.gravando = True
        self.pausado = False
        self.tempo_inicial = datetime.now()
        self.tempo_pausado = timedelta()
        self.timer_ativo = True
        self.atualizar_timer()
    
    def atualizar_timer(self):
        if self.timer_ativo and self.gravando and not self.pausado:
            tempo_total = datetime.now() - self.tempo_inicial - self.tempo_pausado
            minutos = int(tempo_total.total_seconds() // 60)
            segundos = int(tempo_total.total_seconds() % 60)
            
            self.label_timer.configure(text=f"{minutos:02d}:{segundos:02d}")
            self.janela.after(100, self.atualizar_timer)
    
    def pausar_gravacao(self):
        if not self.pausado:
            self.pausado = True
            self.momento_pausa = datetime.now()
            self.btn_pausar.configure(text="‚ñ∂", fg_color=self.cores["sucesso"])
            self.label_rec.configure(text="‚è∏ PAUSADO", text_color=self.cores["alerta"])
        else:
            self.tempo_pausado += datetime.now() - self.momento_pausa
            self.pausado = False
            self.btn_pausar.configure(text="‚è∏", fg_color=self.cores["alerta"])
            self.label_rec.configure(text="‚óè REC", text_color=self.cores["perigo"])
            self.atualizar_timer()
    
    def parar_gravacao(self):
        resposta = messagebox.askyesno(
            "Finalizar Grava√ß√£o",
            "Deseja finalizar a grava√ß√£o?\n\nA reuni√£o ser√° salva e processada.",
            parent=self.janela
        )
        
        if resposta:
            self.gravando = False
            self.timer_ativo = False
            
            messagebox.showinfo(
                "Sucesso", 
                "Grava√ß√£o finalizada com sucesso!\n\nA transcri√ß√£o est√° sendo processada.",
                parent=self.janela
            )
            self.transicao_rapida(self.mostrar_menu_principal)
    
    def cancelar_gravacao(self):
        resposta = messagebox.askyesno(
            "Cancelar Grava√ß√£o",
            "Tem certeza que deseja cancelar?\n\nTodo o conte√∫do gravado ser√° perdido!",
            parent=self.janela
        )
        
        if resposta:
            self.gravando = False
            self.timer_ativo = False
            self.transicao_rapida(self.mostrar_menu_principal)
    
    # ==================== ASSISTENTE IA ====================
    def mostrar_assistente(self):
        self.transicao_rapida(self._criar_assistente)
    
    def _criar_assistente(self):
        self.frame_atual = ctk.CTkFrame(self.container_principal, fg_color=self.cores["fundo"])
        self.frame_atual.pack(fill="both", expand=True)
        
        self.criar_cabecalho_voltar("ü§ñ Assistente IA")
        
        self.text_chat = ctk.CTkTextbox(
            self.frame_atual,
            height=120,
            font=ctk.CTkFont(size=11),
            fg_color=self.cores["superficie"]
        )
        self.text_chat.pack(fill="both", expand=True, padx=5, pady=5)
        
        msg_inicial = "ü§ñ Ol√°! Como posso ajud√°-lo?\n\n"
        if hasattr(self, 'contexto_reuniao') and self.contexto_reuniao:
            msg_inicial += f"üìÑ Analisando: {self.contexto_reuniao}\n\n"
            msg_inicial += "Posso criar resumo, listar a√ß√µes ou insights.\n\n"
            self.contexto_reuniao = None
            
        self.text_chat.insert("end", msg_inicial)
        self.text_chat.configure(state="disabled")
        
        frame_entrada = ctk.CTkFrame(self.frame_atual, height=32, fg_color=self.cores["superficie"])
        frame_entrada.pack(fill="x", padx=5, pady=(0, 5))
        frame_entrada.pack_propagate(False)
        
        self.btn_audio = ctk.CTkButton(
            frame_entrada,
            text="üé§",
            width=32,
            height=24,
            font=ctk.CTkFont(size=14),
            fg_color=self.cores["secundaria"],
            hover_color=self.cores["primaria"],
            command=self.abrir_interface_audio
        )
        self.btn_audio.pack(side="left", padx=4)
        
        self.entry_chat = ctk.CTkEntry(
            frame_entrada,
            placeholder_text="Digite ou use o microfone...",
            font=ctk.CTkFont(size=10),
            fg_color=self.cores["fundo"],
            border_color=self.cores["primaria"],
            height=24
        )
        self.entry_chat.pack(side="left", fill="x", expand=True, padx=4, pady=4)
        
        ctk.CTkButton(
            frame_entrada,
            text="‚û§",
            width=32,
            height=24,
            font=ctk.CTkFont(size=12),
            fg_color=self.cores["primaria"],
            command=self.enviar_mensagem
        ).pack(side="right", padx=4)
        
        self.entry_chat.bind("<Return>", lambda e: self.enviar_mensagem())
        self.entry_chat.focus_set()
    
    def _mostrar_processando(self):
        """Mostra indicador de processamento no chat"""
        self.text_chat.configure(state="normal")
        self.text_chat.insert("end", "ü§ñ Processando...\n")
        self.text_chat.configure(state="disabled")
        self.text_chat.see("end")
    
    def _resposta_ia_callback(self, resposta: str):
        """Callback para resposta da IA"""
        # Executar na thread principal da GUI
        self.janela.after(0, lambda: self._atualizar_chat_com_resposta(resposta))
    
    def _erro_ia_callback(self, erro: str):
        """Callback para erro no processamento"""
        self.janela.after(0, lambda: self._atualizar_chat_com_erro(erro))
    
    def _atualizar_chat_com_resposta(self, resposta: str):
        """Atualiza o chat com a resposta da IA"""
        self.text_chat.configure(state="normal")
        
        # Remover "Processando..."
        content = self.text_chat.get("1.0", "end-1c")
        lines = content.split('\n')
        if lines and "Processando..." in lines[-1]:
            # Remover √∫ltima linha
            self.text_chat.delete("end-2l", "end")
        
        # Adicionar resposta
        self.text_chat.insert("end", f"ü§ñ {resposta}\n\n")
        self.text_chat.configure(state="disabled")
        self.text_chat.see("end")
        
        # Reabilitar entrada
        self.entry_chat.configure(state="normal")
        self.entry_chat.focus_set()
    
    def _atualizar_chat_com_erro(self, erro: str):
        """Atualiza o chat com mensagem de erro"""
        self.text_chat.configure(state="normal")
        
        # Remover "Processando..."
        content = self.text_chat.get("1.0", "end-1c")
        lines = content.split('\n')
        if lines and "Processando..." in lines[-1]:
            self.text_chat.delete("end-2l", "end")
        
        # Adicionar erro
        self.text_chat.insert("end", f"‚ùå Erro: {erro}\n\n")
        self.text_chat.configure(state="disabled")
        self.text_chat.see("end")
        
        # Reabilitar entrada
        self.entry_chat.configure(state="normal")
        self.entry_chat.focus_set()
    
    def enviar_mensagem(self):
        msg = self.entry_chat.get().strip()
        if not msg:
            return
        
        self.text_chat.configure(state="normal")
        self.text_chat.insert("end", f"üë§ {msg}\n")
        self.text_chat.configure(state="disabled")
        self.text_chat.see("end")
        
        self.entry_chat.delete(0, "end")
        
        # Desabilitar entrada durante processamento
        self.entry_chat.configure(state="disabled")
        
        # Mostrar indicador de processamento
        self._mostrar_processando()
        
        # Processar mensagem via backend de forma ass√≠ncrona
        process_message_async(
            self.backend,
            msg,
            self._resposta_ia_callback,
            self._erro_ia_callback
        )
    
    # ==================== INTERFACE DE √ÅUDIO COM CLIQUE ====================
    def abrir_interface_audio(self):
        """Abre interface de √°udio em tela cheia com anima√ß√£o imediata"""
        # Criar nova tela completa para a anima√ß√£o
        self.frame_audio_full = ctk.CTkFrame(
            self.container_principal,
            fg_color=self.cores["fundo"]
        )
        self.frame_audio_full.place(x=0, y=0, relwidth=1, relheight=1)
        
        # Canvas para part√≠culas em tela cheia
        self.canvas_particulas = Canvas(
            self.frame_audio_full,
            width=320,
            height=240,
            bg=self.cores["fundo"],
            highlightthickness=0
        )
        self.canvas_particulas.pack(fill="both", expand=True)
        
        # √Årea de controle central
        control_frame = ctk.CTkFrame(
            self.frame_audio_full,
            fg_color="transparent"
        )
        control_frame.place(relx=0.5, rely=0.5, anchor="center")
        
        # Bot√£o circular clic√°vel
        self.btn_microfone = ctk.CTkButton(
            control_frame,
            text="üé§",
            width=60,
            height=60,
            corner_radius=30,
            font=ctk.CTkFont(size=24),
            fg_color=self.cores["secundaria"],
            hover_color=self.cores["primaria"],
            command=self.alternar_gravacao
        )
        self.btn_microfone.pack()
        
        # Instru√ß√£o
        self.label_instrucao = ctk.CTkLabel(
            control_frame,
            text="Clique para gravar",
            font=ctk.CTkFont(size=11),
            text_color=self.cores["texto_secundario"]
        )
        self.label_instrucao.pack(pady=(5, 0))
        
        # Bot√£o X minimalista no canto
        self.btn_fechar = ctk.CTkButton(
            self.frame_audio_full,
            text="‚úï",
            width=40,
            height=40,
            font=ctk.CTkFont(size=18),
            fg_color="transparent",
            text_color=self.cores["texto_secundario"],
            hover_color=self.cores["superficie"],
            corner_radius=20,
            border_width=1,
            border_color=self.cores["borda"],
            command=self.fechar_audio
        )
        self.btn_fechar.place(x=270, y=10)
        
        # Estado
        self.audio_estado = "idle"
        self.animacao_ativa = True
        self.particulas = []
        
        # Iniciar anima√ß√£o
        self.animar_particulas()

    def alternar_gravacao(self):
        """Alterna entre estados de grava√ß√£o ao clicar"""
        if not self.audio_recorder:
            messagebox.showwarning(
                "√Åudio n√£o dispon√≠vel",
                "Instale pyaudio para usar esta funcionalidade:\npip install pyaudio",
                parent=self.janela
            )
            self.fechar_audio()
            return
            
        if self.audio_estado == "idle":
            # Iniciar grava√ß√£o real
            self.audio_estado = "recording"
            self.btn_microfone.configure(
                text="üî¥",
                fg_color=self.cores["audio_ativo"]
            )
            self.label_instrucao.configure(text="Gravando... Clique para parar")
            
            # Iniciar grava√ß√£o real
            try:
                self.audio_recorder.toggle_recording()
                # Atualizar n√≠vel de √°udio em tempo real
                self.atualizar_nivel_audio()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao iniciar grava√ß√£o: {str(e)}", parent=self.janela)
                self.fechar_audio()
            
        elif self.audio_estado == "recording":
            # Parar grava√ß√£o e processar
            self.audio_estado = "processing"
            self.btn_microfone.configure(
                text="‚è≥",
                fg_color=self.cores["audio_processando"],
                state="disabled"
            )
            self.label_instrucao.configure(text="Processando transcri√ß√£o...")
            
            # Parar grava√ß√£o real
            try:
                self.audio_recorder.toggle_recording()
                # Processar em thread separada
                threading.Thread(target=self.processar_audio_gravado, daemon=True).start()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao parar grava√ß√£o: {str(e)}", parent=self.janela)
                self.fechar_audio()

    def animar_particulas(self):
        """Anima√ß√£o de part√≠culas flutuantes"""
        if not self.animacao_ativa:
            return
        
        self.canvas_particulas.delete("all")
        
        # Centro da tela
        centro_x = 160
        centro_y = 120
        
        # Adicionar novas part√≠culas
        if self.audio_estado == "recording" and random.random() > 0.7:
            self.particulas.append({
                'x': random.randint(50, 270),
                'y': 200,
                'vy': -random.uniform(1, 3),
                'size': random.uniform(2, 5),
                'life': 1.0
            })
        
        elif self.audio_estado == "processing" and random.random() > 0.5:
            # Part√≠culas circulares ao redor do centro
            angulo = random.uniform(0, 2 * math.pi)
            raio = 40
            self.particulas.append({
                'x': centro_x + math.cos(angulo) * raio,
                'y': centro_y + math.sin(angulo) * raio,
                'vx': -math.cos(angulo) * 0.5,
                'vy': -math.sin(angulo) * 0.5,
                'size': 3,
                'life': 1.0
            })
        
        # Atualizar e desenhar part√≠culas
        particulas_vivas = []
        for p in self.particulas:
            # Movimento
            p['x'] += p.get('vx', 0)
            p['y'] += p.get('vy', 0)
            p['life'] -= 0.02
            
            if p['life'] > 0:
                # Cor baseada no estado
                if self.audio_estado == "recording":
                    cor = self.cores["audio_ativo"]
                elif self.audio_estado == "processing":
                    cor = self.cores["audio_processando"]
                else:
                    cor = self.cores["audio_inativo"]
                
                # Aplicar transpar√™ncia baseada na vida
                cor_alpha = self._ajustar_cor_alpha(cor, p['life'] * 0.6)
                
                # Desenhar part√≠cula
                size = p['size'] * p['life']
                self.canvas_particulas.create_oval(
                    p['x'] - size, p['y'] - size,
                    p['x'] + size, p['y'] + size,
                    fill=cor_alpha, outline=""
                )
                
                particulas_vivas.append(p)
        
        self.particulas = particulas_vivas
        
        # Efeito glow no centro durante estados ativos
        if self.audio_estado in ["recording", "processing"]:
            for i in range(3):
                raio = 30 - i * 8
                alpha = 0.1 * (1 - i * 0.3)
                cor = self.cores["glow"] if self.audio_estado == "recording" else self.cores["audio_processando"]
                cor_glow = self._ajustar_cor_alpha(cor, alpha)
                
                self.canvas_particulas.create_oval(
                    centro_x - raio, centro_y - raio,
                    centro_x + raio, centro_y + raio,
                    fill=cor_glow, outline=""
                )
        
        self.janela.after(30, self.animar_particulas)

    def _ajustar_cor_alpha(self, cor_hex, alpha):
        """Simula transpar√™ncia"""
        r = int(cor_hex[1:3], 16)
        g = int(cor_hex[3:5], 16)
        b = int(cor_hex[5:7], 16)
        
        fundo_r = int(self.cores["fundo"][1:3], 16)
        fundo_g = int(self.cores["fundo"][3:5], 16)
        fundo_b = int(self.cores["fundo"][5:7], 16)
        
        r = int(r * alpha + fundo_r * (1 - alpha))
        g = int(g * alpha + fundo_g * (1 - alpha))
        b = int(b * alpha + fundo_b * (1 - alpha))
        
        return f"#{r:02x}{g:02x}{b:02x}"

    def atualizar_nivel_audio(self):
        """Atualiza part√≠culas baseado no n√≠vel de √°udio"""
        if self.audio_estado == "recording" and self.audio_recorder:
            nivel = self.audio_recorder.get_audio_level()
            
            # Adicionar mais part√≠culas baseado no n√≠vel
            if nivel > 0.3 and random.random() > (1 - nivel):
                for _ in range(int(nivel * 5)):
                    self.particulas.append({
                        'x': random.randint(50, 270),
                        'y': 200,
                        'vy': -random.uniform(1, 4) * nivel,
                        'size': random.uniform(2, 6) * nivel,
                        'life': 1.0
                    })
            
            # Continuar atualizando
            self.janela.after(50, self.atualizar_nivel_audio)
    
    def processar_audio_gravado(self):
        """Processa o √°udio gravado em thread separada"""
        try:
            # Obter transcri√ß√£o
            transcricao = self.audio_recorder.get_transcription()
            
            if transcricao:
                # Executar na thread principal
                self.janela.after(0, lambda: self.processar_transcricao(transcricao))
            else:
                self.janela.after(0, lambda: self.erro_transcricao("N√£o foi poss√≠vel transcrever o √°udio"))
                
        except Exception as e:
            self.janela.after(0, lambda: self.erro_transcricao(str(e)))
    
    def processar_transcricao(self, transcricao: str):
        """Processa a transcri√ß√£o obtida"""
        # Adicionar transcri√ß√£o ao chat
        self.text_chat.configure(state="normal")
        self.text_chat.insert("end", f"üé§ {transcricao}\n")
        self.text_chat.configure(state="disabled")
        self.text_chat.see("end")
        
        # Fechar interface de √°udio
        self.fechar_audio()
        
        # Processar como mensagem normal
        self.entry_chat.configure(state="disabled")
        self._mostrar_processando()
        
        # Processar mensagem via backend
        process_message_async(
            self.backend,
            transcricao,
            self._resposta_ia_callback,
            self._erro_ia_callback
        )
    
    def erro_transcricao(self, erro: str):
        """Trata erro na transcri√ß√£o"""
        messagebox.showerror("Erro na transcri√ß√£o", f"Erro: {erro}", parent=self.janela)
        self.fechar_audio()
        
    def processar_e_fechar(self):
        """Processa e retorna resultado"""
        # M√©todo mantido para compatibilidade
        pass

    def fechar_audio(self):
        """Fecha interface de √°udio e volta para assistente"""
        self.animacao_ativa = False
        
        # Destruir frame de √°udio
        self.frame_audio_full.destroy()
    
    # ==================== UTILIDADES ====================
    def criar_cabecalho_voltar(self, titulo):
        frame_header = ctk.CTkFrame(self.frame_atual, height=35, fg_color=self.cores["superficie"])
        frame_header.pack(fill="x")
        frame_header.pack_propagate(False)
        
        ctk.CTkButton(
            frame_header,
            text="‚óÑ",
            width=30,
            height=25,
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            text_color=self.cores["texto"],
            hover_color=self.cores["secundaria"],
            command=lambda: self.transicao_rapida(self.mostrar_menu_principal)
        ).pack(side="left", padx=5, pady=5)
        
        ctk.CTkLabel(
            frame_header,
            text=titulo,
            font=ctk.CTkFont(size=13, weight="bold"),
            text_color=self.cores["texto"]
        ).pack(side="left", padx=10, pady=8)
    
    def fazer_logout(self):
        if self.backend and self.usuario_logado:
            self.backend.logout()
        self.usuario_logado = None
        self.transicao_rapida(self.mostrar_login)

# ==================== INICIALIZA√á√ÉO ====================
if __name__ == "__main__":
    print("üöÄ Iniciando Sistema - Vers√£o Linux Corrigida...")
    print("üì± Interface: 320x240 pixels")
    print("üêß Otimizado para Linux com entrada de texto funcionando")
    print("‚ö†Ô∏è Use Ctrl+C ou feche a janela para sair\n")
    
    app = SistemaTFT()
    app.executar()