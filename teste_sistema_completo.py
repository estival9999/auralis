"""
Teste completo do sistema AURALIS com mem√≥ria contextual e limpeza autom√°tica
"""

import os
import time
from pathlib import Path
from datetime import datetime

# Configurar ambiente
os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY', '')
os.environ['SUPABASE_URL'] = os.getenv('SUPABASE_URL', '')
os.environ['SUPABASE_SERVICE_ROLE_KEY'] = os.getenv('SUPABASE_SERVICE_ROLE_KEY', '')

from src.agente_busca_melhorado import AgenteBuscaMelhorado
from src.embeddings_processor import ProcessadorEmbeddings
from src.audio_processor import AudioRecorder
from src.memoria_contextual import obter_gerenciador_memoria

def testar_sistema_completo():
    """Testa todo o fluxo do sistema"""
    print("=== TESTE COMPLETO DO SISTEMA AURALIS ===\n")
    
    # 1. Testar mem√≥ria contextual
    print("1. Testando Sistema de Mem√≥ria Contextual")
    print("-" * 50)
    
    gerenciador = obter_gerenciador_memoria()
    
    # Simular conversa√ß√£o
    perguntas = [
        "Qual foi a √∫ltima reuni√£o gravada?",
        "Quem participou dessa reuni√£o?",
        "Quais foram as principais decis√µes?",
        "Existe alguma reuni√£o sobre TAMANDUAS?"
    ]
    
    agente = AgenteBuscaMelhorado()
    
    for i, pergunta in enumerate(perguntas):
        print(f"\nüîç Pergunta {i+1}: {pergunta}")
        resposta = agente.processar_pergunta(pergunta)
        print(f"üí¨ Resposta: {resposta[:100]}...")
        time.sleep(0.5)
    
    # Mostrar estat√≠sticas
    print("\n\n2. Estat√≠sticas da Mem√≥ria")
    print("-" * 50)
    stats = gerenciador.memoria.obter_estatisticas()
    for k, v in stats.items():
        print(f"   {k}: {v}")
    
    # Mostrar contexto
    print("\n\n3. Contexto Acumulado")
    print("-" * 50)
    contexto = gerenciador.obter_contexto()
    print(contexto)
    
    # 2. Testar processamento de arquivos com exclus√£o
    print("\n\n4. Testando Processamento com Limpeza Autom√°tica")
    print("-" * 50)
    
    # Criar arquivo tempor√°rio de teste
    temp_dir = Path("audio_temp")
    temp_dir.mkdir(exist_ok=True)
    
    arquivo_teste = temp_dir / f"teste_reuniao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    conteudo_teste = """T√≠tulo: Reuni√£o de Teste de Sistema
Respons√°vel: Sistema Automatizado
Data: 05/01/2025
Hora: 14:30
Observa√ß√µes: Teste de processamento com exclus√£o autom√°tica

Participantes:
- Jo√£o Silva (Gerente)
- Maria Santos (Analista)

Pauta:
1. Teste do sistema de mem√≥ria contextual
2. Verifica√ß√£o da limpeza autom√°tica de arquivos
3. Valida√ß√£o do processamento de embeddings

Decis√µes:
- Sistema aprovado para produ√ß√£o
- Implementar melhorias incrementais
- Documentar processos

Esta √© uma reuni√£o de teste para validar o sistema completo."""
    
    # Escrever arquivo
    with open(arquivo_teste, 'w', encoding='utf-8') as f:
        f.write(conteudo_teste)
    
    print(f"‚úÖ Arquivo criado: {arquivo_teste.name}")
    print(f"   Tamanho: {arquivo_teste.stat().st_size} bytes")
    
    # Processar com exclus√£o autom√°tica
    processador = ProcessadorEmbeddings()
    sucesso = processador.processar_arquivo(str(arquivo_teste), excluir_apos_processar=True)
    
    if sucesso:
        print("‚úÖ Arquivo processado com sucesso!")
        
        # Verificar se foi exclu√≠do
        if not arquivo_teste.exists():
            print("‚úÖ Arquivo removido automaticamente ap√≥s processamento!")
        else:
            print("‚ùå Erro: arquivo n√£o foi removido")
    else:
        print("‚ùå Erro no processamento")
    
    # 3. Testar busca ap√≥s novo processamento
    print("\n\n5. Testando Busca Ap√≥s Novo Processamento")
    print("-" * 50)
    
    pergunta_teste = "Qual foi a √∫ltima reuni√£o sobre teste de sistema?"
    print(f"üîç Pergunta: {pergunta_teste}")
    resposta = agente.processar_pergunta(pergunta_teste)
    print(f"üí¨ Resposta: {resposta}")
    
    # 4. Fechar sess√£o e mostrar resumo
    print("\n\n6. Fechando Sess√£o e Limpando Mem√≥ria")
    print("-" * 50)
    
    gerenciador.fechar_sessao()
    
    # Verificar que mem√≥ria foi limpa
    stats_depois = gerenciador.memoria.obter_estatisticas()
    print("\nEstat√≠sticas ap√≥s limpeza:")
    print(f"   Total de entradas: {stats_depois['total_entradas']}")
    print(f"   Mem√≥ria limpa: {'‚úÖ' if stats_depois['total_entradas'] == 0 else '‚ùå'}")
    
    # 5. Testar limpeza de arquivos de √°udio tempor√°rios
    print("\n\n7. Testando Limpeza de Arquivos de √Åudio")
    print("-" * 50)
    
    # Listar arquivos em audio_temp
    audio_files = list(temp_dir.glob("*.wav"))
    txt_files = list(temp_dir.glob("*.txt"))
    
    print(f"üìÅ Pasta audio_temp:")
    print(f"   Arquivos .wav: {len(audio_files)}")
    print(f"   Arquivos .txt: {len(txt_files)}")
    
    if audio_files:
        print("   ‚ö†Ô∏è  Arquivos .wav encontrados (deveriam ser limpos ap√≥s transcri√ß√£o):")
        for f in audio_files[:3]:  # Mostrar at√© 3
            print(f"      - {f.name}")
    else:
        print("   ‚úÖ Nenhum arquivo .wav residual")
    
    print("\n=== TESTE COMPLETO FINALIZADO ===")


if __name__ == "__main__":
    testar_sistema_completo()